// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
maven_parse_resolve is an example program that demonstrates how to parse and
process Maven POM files using the implementation in deps.dev/util/maven and
then use the resolver in deps.dev/util/resolve to resolve the dependencies.

The project after parsing and processing is equivalent to what is generated by
`mvn help:effective-pom`.

To access upstream POM files, requests are sent to the Maven Central
repository.
*/
package main

import (
	"context"
	"crypto/x509"
	"encoding/xml"
	"errors"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"os"
	"strings"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"

	pb "deps.dev/api/v3alpha"
	"deps.dev/util/maven"
	"deps.dev/util/resolve"
	"deps.dev/util/resolve/dep"
	mavenresolve "deps.dev/util/resolve/maven"
)

func main() {
	log.SetFlags(0)
	if len(os.Args) != 2 {
		log.Fatal("Usage: maven_parse_resolve <file>")
	}

	f, err := os.Open(os.Args[1])
	if err != nil {
		log.Fatalf("Opening file %s: %v", os.Args[1], err)
	}

	var project maven.Project
	if err := xml.NewDecoder(f).Decode(&project); err != nil {
		log.Fatalf("Decoding file: %v", err)
	}

	ctx := context.Background()
	// Fetch parent POM files from upstream, and then merge recursively.
	// For profiles, activated ones are merged too.
	if err := mergeParents(ctx, project.Parent.ProjectKey, 1, &project); err != nil {
		log.Fatalf("Merging parents: %v", err)
	}

	// Processing dependencies includes the following actions.
	// First, dedupe dependencies and dependency management.
	// Second, import dependency management.
	// Finally fill in missing dependency version requirement.
	project.ProcessDependencies(func(groupID, artifactID, version maven.String) (maven.DependencyManagement, error) {
		var result maven.Project
		root := maven.ProjectKey{GroupID: groupID, ArtifactID: artifactID, Version: version}
		if err := mergeParents(ctx, root, 0, &result); err != nil {
			return maven.DependencyManagement{}, err
		}
		return result.DependencyManagement, nil
	})

	// Set up gRPC API client.
	certPool, err := x509.SystemCertPool()
	if err != nil {
		log.Fatalf("Getting system cert pool: %v", err)
	}
	creds := credentials.NewClientTLSFromCert(certPool, "")
	conn, err := grpc.Dial("api.deps.dev:443", grpc.WithTransportCredentials(creds))
	if err != nil {
		log.Fatalf("Dialing: %v", err)
	}
	client := NewOverrideClient(*resolve.NewAPIClient(pb.NewInsightsClient(conn)))
	resolver := mavenresolve.NewResolver(client)

	// Resolve the dependencies.
	root := resolve.Version{
		VersionKey: resolve.VersionKey{
			PackageKey: resolve.PackageKey{
				System: resolve.Maven,
				Name:   project.ProjectKey.Name(),
			},
			VersionType: resolve.Concrete,
			Version:     string(project.Version),
		}}
	var reqs []resolve.RequirementVersion
	for _, d := range project.Dependencies {
		reqs = append(reqs, resolve.RequirementVersion{
			VersionKey: resolve.VersionKey{
				PackageKey: resolve.PackageKey{
					System: resolve.Maven,
					Name:   d.Name(),
				},
				VersionType: resolve.Requirement,
				Version:     string(d.Version),
			},
			Type: resolve.MavenDepType(d, ""),
		})
	}
	client.AddVersion(root, reqs)

	start := time.Now()
	log.Printf("Resolving: %v", root)
	g, err := resolver.Resolve(ctx, root.VersionKey)
	if err != nil {
		log.Fatal(err)
	}
	for i, e := range g.Edges {
		e.Type = dep.Type{}
		g.Edges[i] = e
	}
	log.Printf("Resolved in %v", time.Since(start))

	// Print the resolved graph.
	fmt.Println(g)
}

const MaxParent = 100

// mergeParents fetches parent POM files from upstream and then merge their data recursively.
// current is the project to start fetching parents.
// start specifies the index of current project, and it is used to determine if "pom" packaging is needed.
// result holds the merged Maven project data.
func mergeParents(ctx context.Context, current maven.ProjectKey, start int, result *maven.Project) error {
	visited := make(map[maven.ProjectKey]bool, MaxParent)
	for n := start; n < MaxParent; n++ {
		if current.GroupID == "" || current.ArtifactID == "" || current.Version == "" {
			break
		}
		if visited[current] {
			return errors.New("cycle of parent projects")
		}
		visited[current] = true

		proj, err := fetchProject(ctx, current)
		if err != nil {
			return err
		}
		if n > 0 && proj.Packaging != "pom" {
			return fmt.Errorf("invalid packaging for parent project %s", proj.Packaging)
		}
		if err := proj.MergeProfiles(maven.JDKProfileActivation, maven.OSProfileActivation); err != nil {
			return err
		}
		result.MergeParent(proj)
		current = proj.Parent.ProjectKey
	}
	return result.Interpolate()
}

// fetchProject fetches the Maven project specified by the ProjectKey from upstream,
// and then parse it.
func fetchProject(ctx context.Context, pk maven.ProjectKey) (maven.Project, error) {
	g, a, v := string(pk.GroupID), string(pk.ArtifactID), string(pk.Version)
	u, err := url.JoinPath("https://repo.maven.apache.org/maven2", strings.ReplaceAll(g, ".", "/"), a, v, fmt.Sprintf("%s-%s.pom", a, v))
	if err != nil {
		return maven.Project{}, fmt.Errorf("failed to join path: %v", err)
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, u, nil)
	if err != nil {
		return maven.Project{}, fmt.Errorf("failed to create request: %v", err)
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return maven.Project{}, fmt.Errorf("failed to send request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return maven.Project{}, errors.New(resp.Status)
	}

	var proj maven.Project
	if err := xml.NewDecoder(resp.Body).Decode(&proj); err != nil {
		return maven.Project{}, fmt.Errorf("failed to decode Maven project: %w", err)
	}
	return proj, nil
}
